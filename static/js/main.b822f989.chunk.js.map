{"version":3,"sources":["components/search.jsx","components/main.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["Search","search","searchName","input","value","trim","props","setSearchName","Jumbotron","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","ref","Append","Button","variant","onClick","this","Component","Main","state","initView","loading","users","errorMsg","newProps","setState","url","axios","get","then","response","data","items","map","item","name","login","html_url","avatarUrl","avatar_url","catch","error","message","Container","user","index","Row","key","Col","xs","md","href","Image","src","rounded","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPA4CeA,G,iNA/BXC,OAAS,WAEL,IAAMC,EAAa,EAAKC,MAAMC,MAAMC,OACjCH,GAEC,EAAKI,MAAMC,cAAcL,I,wEAKvB,IAAD,OACL,OACI,6BACA,kBAACM,EAAA,EAAD,KACI,mDACA,kBAACC,EAAA,EAAD,CAAYC,UAAU,QAClB,kBAACC,EAAA,EAAD,CACIC,YAAY,4BACZC,aAAW,4BACXC,mBAAiB,eACjBC,IAAO,SAAAZ,GAAK,OAAG,EAAKA,MAAMA,KAE9B,kBAACM,EAAA,EAAWO,OAAZ,KACI,kBAACC,EAAA,EAAD,CAAQC,QAAQ,oBAAoBC,QAAWC,KAAKnB,QAApD,kB,GA7BHoB,c,iDC6ENC,E,2MAxEXC,MAAQ,CACJC,UAAU,EACVC,SAAS,EACTC,MAAO,KACPC,SAAU,M,yFAIYC,GAAW,IAAD,OACzB1B,EAAc0B,EAAd1B,WAEPkB,KAAKS,SAAS,CACVL,UAAS,EACTC,SAAQ,IAGZ,IAAMK,EAAG,gDAA4C5B,GACrD6B,IAAMC,IAAIF,GACTG,KAAK,SAAAC,GAEF,IACMR,EADSQ,EAASC,KACHC,MAAMC,IAAI,SAAAC,GAAI,MAC/B,CAACC,KAAKD,EAAKE,MAAOV,IAAIQ,EAAKG,SAAUC,UAAWJ,EAAKK,cAEzD,EAAKd,SAAS,CAACJ,SAAQ,EAAOC,YAEjCkB,MAAM,SAAAC,GAEH,EAAKhB,SAAS,CAACJ,SAAQ,EAAOE,SAASkB,EAAMC,c,+BAK3C,IAAD,EAC0C1B,KAAKG,MAA5CC,EADH,EACGA,SAAUC,EADb,EACaA,QAASC,EADtB,EACsBA,MAAOC,EAD7B,EAC6BA,SAC3BzB,EAAckB,KAAKd,MAAnBJ,WAEP,OAAIsB,EAEI,0DAAgCtB,GAE7BuB,EAEH,0CAEGE,EAEH,4BAAKA,GAIL,6BACI,kBAACoB,EAAA,EAAD,KAEQrB,EAAMW,IAAI,SAACW,EAAMC,GACb,OACI,kBAACC,EAAA,EAAD,CAAKC,IAAKF,GACN,kBAACG,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACZ,uBAAGC,KAAMP,EAAKlB,KAAK,kBAAC0B,EAAA,EAAD,CAAOC,IAAKT,EAAKN,UAAWgB,SAAO,KACtD,2BAAIV,EAAKT,gB,GA/DlClB,aCmBJsC,E,2MAnBXpC,MAAQ,CACJrB,WAAW,I,EAGfK,cAAgB,SAACL,GACb,EAAK2B,SAAU,CAAC3B,gB,wEAKhB,OACI,6BACI,kBAAC,EAAD,CAAQK,cAAea,KAAKb,gBAC5B,kBAAC,EAAD,CAAML,WAAYkB,KAAKG,MAAMrB,kB,GAd3BmB,aCKEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.b822f989.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Jumbotron, InputGroup, FormControl, Button } from 'react-bootstrap'\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nclass Search extends Component {\r\n\r\n    static propTypes ={\r\n        setSearchName: PropTypes.func.isRequired\r\n    }\r\n\r\n    search = () => {\r\n        //get input key words\r\n        const searchName = this.input.value.trim()\r\n        if(searchName) {\r\n            //search\r\n            this.props.setSearchName(searchName)\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <Jumbotron>\r\n                <h1>Search Github Users</h1>\r\n                <InputGroup className=\"mb-3\">\r\n                    <FormControl\r\n                        placeholder=\"Please input the keywords\"\r\n                        aria-label=\"Please input the keywords\"\r\n                        aria-describedby=\"basic-addon2\"\r\n                        ref = {input =>this.input=input}\r\n                    />\r\n                    <InputGroup.Append>\r\n                        <Button variant=\"outline-secondary\" onClick = {this.search}>Search</Button>\r\n                    </InputGroup.Append>\r\n                </InputGroup>\r\n            </Jumbotron>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Search","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { Container, Row, Col, Image } from 'react-bootstrap'\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.css'\r\nimport axios from 'axios'\r\n\r\n\r\nclass Main extends Component {\r\n    static propTypes = {\r\n        searchName:PropTypes.string.isRequired\r\n    }\r\n    state = {\r\n        initView: true,\r\n        loading: false,\r\n        users: null,\r\n        errorMsg: null\r\n\r\n    }\r\n    // when component receive new props\r\n    componentWillReceiveProps(newProps) {\r\n        const {searchName} = newProps\r\n        //update state\r\n        this.setState({\r\n            initView:false,\r\n            loading:true\r\n        })\r\n        //sending ajax request\r\n        const url = `https://api.github.com/search/users?q=${searchName}`\r\n        axios.get(url)\r\n        .then(response => {\r\n            //get response data\r\n            const result = response.data\r\n            const users = result.items.map(item => (\r\n                {name:item.login, url:item.html_url, avatarUrl: item.avatar_url}))\r\n            //update state(success)\r\n            this.setState({loading:false, users})\r\n        })\r\n        .catch(error => {\r\n            //update state(error)\r\n            this.setState({loading:false, errorMsg:error.message})\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { initView, loading, users, errorMsg } = this.state\r\n        const {searchName} = this.props\r\n\r\n        if (initView) {\r\n            return (\r\n                <h2>Please input the key words:{searchName}</h2>\r\n            )\r\n        } else if (loading) {\r\n            return (\r\n                <h2>Loading...</h2>\r\n            )\r\n        } else if (errorMsg) {\r\n            return (\r\n                <h2>{errorMsg}</h2>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Container>\r\n                        {\r\n                            users.map((user, index) => {\r\n                                return (\r\n                                    <Row key={index}>\r\n                                        <Col xs={6} md={4} >\r\n                                            <a href={user.url}><Image src={user.avatarUrl} rounded /></a>\r\n                                            <p>{user.name}</p>\r\n                                        </Col>\r\n                                    </Row>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n                    </Container>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default Main","import React, { Component } from 'react'\r\nimport Search from './search'\r\nimport Main from './main'\r\n\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        searchName:''\r\n    }\r\n\r\n    setSearchName = (searchName) => {\r\n        this.setState ({searchName})\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Search setSearchName={this.setSearchName}/>\r\n                <Main searchName={this.state.searchName}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}