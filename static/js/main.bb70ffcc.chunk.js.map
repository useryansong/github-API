{"version":3,"sources":["components/search.jsx","components/main.jsx","components/app.jsx","serviceWorker.js","index.js"],"names":["styles","inputDiv","display","justifyContent","Search","onSearch","useState","inputValue","setInputValue","style","type","value","placeholder","onChange","e","target","onClick","Main","searchName","users","setUsers","useEffect","url","axios","get","then","response","data","items","map","item","name","login","html_url","avatarUrl","avatar_url","className","user","index","key","href","src","outer","height","backgroundColor","inner","width","overflow","borderRadius","marginTop","paddingTop","App","setSearchName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAqBMA,G,MAAS,CACXC,SAAU,CACNC,QAAS,OACTC,eAAgB,kBAGTC,EAtBA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,SAAc,EACQC,mBAAS,IADjB,mBACrBC,EADqB,KACTC,EADS,KAG5B,OACI,yBAAKC,MAAST,EAAOC,UACjB,2BACIS,KAAK,OACLC,MAAOJ,EACPK,YAAY,wBACZC,SAAY,SAAAC,GAAMN,EAAcM,EAAEC,OAAOJ,UAE7C,4BAAQK,QAAS,kBAAKX,EAASE,KAA/B,Y,yBCkCGU,EA5CF,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EAEHZ,mBAAS,IAFN,mBAEtBa,EAFsB,KAEfC,EAFe,KAwB7B,OAlBAC,oBAAU,WAEN,IAAMC,EAAG,gDAA4CJ,GACrDK,IAAMC,IAAIF,GACLG,KAAK,SAAAC,GAEF,IACMP,EADSO,EAASC,KACHC,MAAMC,IAAI,SAAAC,GAAI,MAC/B,CACIC,KAAMD,EAAKE,MACXV,IAAKQ,EAAKG,SACVC,UAAWJ,EAAKK,cAExBf,EAASD,MAElB,CAACD,IAIA,yBAAKkB,UAAU,aAEPjB,EAAMU,IAAI,SAACQ,EAAMC,GACb,OACI,yBACIC,IAAKD,EACLF,UAAW,WAEX,yBAAKA,UAAU,YACX,uBAAGI,KAAMH,EAAKf,KAAM,yBAAKc,UAAU,SAASK,IAAKJ,EAAKH,cAE1D,yBAAKE,UAAU,eAAeC,EAAKN,WChBzD/B,G,MAAQ,CACV0C,MAAO,CACHC,OAAQ,QACRC,gBAAiB,UACjB1C,QAAS,OACTC,eAAgB,UAEpB0C,MAAO,CACHC,MAAO,MACPH,OAAO,MACPI,SAAU,OACVH,gBAAiB,OACjBI,aAAc,OACdC,UAAW,GACXC,WAAY,MAILC,EAvCH,WAAO,IAAD,EAEsB7C,mBAAS,IAF/B,mBAEPY,EAFO,KAEKkC,EAFL,KAQd,OACI,yBAAK3C,MAAOT,EAAO0C,OACf,yBAAKjC,MAAOT,EAAO6C,OACf,kBAAC,EAAD,CACIxC,SARC,SAACa,GACdkC,EAAclC,MAQN,kBAAC,EAAD,CACIA,WAAYA,OCPZmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC,iB","file":"static/js/main.bb70ffcc.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.css'\r\n\r\n\r\nconst Search = ({ onSearch}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    return (\r\n        <div style = {styles.inputDiv}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                placeholder='Please input username'\r\n                onChange = {e => {setInputValue(e.target.value)}}\r\n            />\r\n            <button onClick={() =>onSearch(inputValue)}>Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst styles = {\r\n    inputDiv: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around',\r\n    }\r\n}\r\nexport default Search","import React, { useState, useEffect } from 'react'\r\nimport './main.css'\r\n\r\nimport axios from 'axios'\r\n\r\n\r\nconst Main = ({ searchName }) => {\r\n\r\n    const [users, setUsers] = useState([]);\r\n\r\n    // when component receive new searchName\r\n\r\n    useEffect(() => {\r\n        //sending ajax request\r\n        const url = `https://api.github.com/search/users?q=${searchName}`\r\n        axios.get(url)\r\n            .then(response => {\r\n                //get response data\r\n                const result = response.data\r\n                const users = result.items.map(item => (\r\n                    {\r\n                        name: item.login,\r\n                        url: item.html_url,\r\n                        avatarUrl: item.avatar_url\r\n                    }))\r\n                setUsers(users)\r\n            })\r\n    }, [searchName]);\r\n\r\n\r\n    return (\r\n        <div className='mainOuter'>\r\n            {\r\n                users.map((user, index) => {\r\n                    return (\r\n                        <div \r\n                            key={index}\r\n                            className ='mainDiv'\r\n                            >\r\n                            <div className='profiles'>\r\n                                <a href={user.url} ><img className='imgDiv' src={user.avatarUrl} /></a>\r\n                            </div>\r\n                            <div className='usernameDiv'>{user.name}</div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Main","import React, { useState } from 'react'\r\nimport Search from './search'\r\nimport Main from './main'\r\nimport './app.css'\r\n\r\nconst App = () => {\r\n\r\n    const [searchName, setSearchName] = useState('');\r\n\r\n    const onSearch = (searchName) => {\r\n        setSearchName(searchName)\r\n    }\r\n\r\n    return (\r\n        <div style={styles.outer}>\r\n            <div style={styles.inner}>\r\n                <Search\r\n                    onSearch={onSearch} />\r\n                <Main\r\n                    searchName={searchName} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst styles ={\r\n    outer: {\r\n        height: '100vh',\r\n        backgroundColor: '#EDEDED',\r\n        display: \"flex\",\r\n        justifyContent: 'center'\r\n    },\r\n    inner: {\r\n        width: \"60%\",\r\n        height:\"80%\",\r\n        overflow: \"auto\",\r\n        backgroundColor: '#fff',\r\n        borderRadius: '12px',\r\n        marginTop: 40,\r\n        paddingTop: 20,\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}